each start up will consist of the following steps after setup is complete
	1- in terminal type - cd angular-phonecat
	2- change step of tutorial - git checkout -f step-0
	3- in seperate terminal - cd angular-phonecat and then - npm start to start server
	4- go to http://localhost:8000/app/index.html
	5- npm test for karma - npm run protractor for e2e testing (1st terminal)



SETUP
	1)download angular-phonecat:
		*git clone --depth=14 https://github.com/angular/angular-phonecat.git
	2)change directory
		*cd angular-phonecat
	3)install Node.Js
		-go to website http://nodejs.org/download
		-check version in git console
			*node --version
	4)download tool dependencies (bower)
		*npm install
	5)npm helper scripts to run common tasks that are needed while developing
		*npm start (start a local development web-server)
		*npm test (start the karma unit test runner)
		*npm run protractor (run the protractor end to end (e2e) tests
		*npm run update-webdriver (install the drivers needed by protractor
	6)after running npm start, the site is located at
		http://localhost:8000/app/index.html
	7)run unit tests with (karma will read configuration file at test/karma.conf.js)
		*npm test
		its good to leave this running all the time for live feedback during development about whether changes 

pass the unit tests
	8)install drivers for e2e tests (only do once)
		*npm run update-webdriver
		when running e2e test, first npm start, then npm run protractor

--------------------------------------------------------


1 - STATIC TEMPLATE
	compare normal html with same code in angular
<ul>
  <li>
    <span>Nexus S</span>
    <p>
      Fast just got faster with Nexus S.
    </p>
  </li>
  <li>
    <span>Motorola XOOMâ„¢ with Wi-Fi</span>
    <p>
      The Next, Next Generation tablet.
    </p>
  </li>
</ul>

2 - ANGULAR TEMPLATES
	angular style for previous code
<html ng-app="phonecatApp">
<head>
  ...
  <script src="bower_components/angular/angular.js"></script>
  <script src="js/controllers.js"></script>
</head>
<body ng-controller="PhoneListCtrl">

  <ul>
    <li ng-repeat="phone in phones">
      <span>{{phone.name}}</span>
      <p>{{phone.snippet}}</p>
    </li>
  </ul>

ng-repeat says to gather all the 'phone' variables in the phones object and for each one, <span> will show the phone name 

and <p> will show the phone snippet. each phone will be created in an <li> element along with their <span> and <p>.

simple test for this code would be:
describe('PhoneListCtrl', function(){

  it('should create "phones" model with 3 phones', function() {
    var scope = {},
        ctrl = new PhoneListCtrl(scope);

    expect(scope.phones.length).toBe(3);
  });

});

when ng-repeat used in a table, it added new table elements for each array. Assuming ng-repeat duplicates the element it 

was added to when repeating the array. where {{i}} is placed, the array item gets repeatedly created with the next array 

along with the parent element and any element in between {{i}} and ng-repeat="i in..."
<table>
  <tr><th>row number</th></tr>
  <tr ng-repeat="i in [0, 1, 2, 3, 4, 5, 6, 7]"><td>{{i}}
  </td></tr>
</table>

EXTRA POINTS: try and make an 8x8 table using an additional ng-repeat
<tr ng-repeat="x in [0,1,2,3,4,5,6,7]">{{i+1}}<td ng-repeat="...">{{x+1}}</td></tr>

3 - FILTERING REPEATERS
the input becomes the owner of an ng-model named 'query'
Search: <input ng-model="query">

in the list element, the <li> uses ng-repeat and is defined to repeat the 'phone in phones' and filter by the text input 

from the model 'query'
<li ng-repeat="phone in phones | filter:query">
then the values of {{phone.name}} and {{phone.snippet}} are placed in the elements that will be repeated
        <li ng-repeat="phone in phones | filter:query">
          {{phone.name}}
          <p>{{phone.snippet}}</p>
	</li>

by moving the ng-controller to the html tag with the ng-app, adding {{query}} to <title> tag, updating scenarios.js for 

e2e testing, verifies that title was properly upated with {{query}} from the input ng-model="query". testing defined this 

with expect(browser.getTitle()).toMatch(...)
while adding {{query}} to the title works fine, using <title ng-bind-template="Google Phone Gallery: {{query}}"> ensures 

the angular code is invisible to the user while the page is loading.

4 - TWO-WAY DATA BINDING
dynamic ordering is implemented by creating a new model property and wiring together with the repeater, data binding 

handles the rest. in this example, angular creates the two-way data binding for orderProp and its then used as the input 

for the orderBy filter.
	<select ng-model="orderProp">
  		<option value="name">Alphabetical</option>
  		<option value="age">Newest</option>
	</select>
since the controller sets orderProp to 'age' and the html <option> has the value of 'age', angular automatically sets the 

age option as the default option for select when the page is loaded. $scope.orderProp = 'age';
adding - to the value reversed the order the list was displayed <option value="-age">

5 - XHRs & DEPENDENCY INJECTION
	phonecatApp.controller('PhoneListCtrl', function ($scope, $http) {
  		$http.get('phones/phones.json').success(function(data) {
    			$scope.phones = data;	});
injector id's $http as a dependency of the controller. $http makes a server request "http get", define directory and when 

successful, run this code. the data of the json file gets stored to the $scope.phones model.
	function PhoneListCtrl($scope, $http) {...}
	PhoneListCtrl.$inject = ['$scope', '$http'];
	phonecatApp.controller('PhoneListCtrl', PhoneListCtrl);
can be coded as 
	function PhoneListCtrl($scope, $http) {...}
	phonecatApp.controller('PhoneListCtrl', ['$scope', '$http', function($scope, $http){function code}]);
so the dependency injector can identify the services correctly when the code is minified. 
	<pre>{{phones | filter:query | orderBy:orderProp | json}}</pre>
takes all the phones, filter:query refers to ng-model="query" for sorting the phones and then checks the option user 

selected with orderBy:orderProp, lists the phones in json format
	adding javascript code.splice(0, 5) limited the results to the first 5 phones. 
	array.splice(index,howmany,item1,...,itemx)
		item1,...,itemx is options. each item is a new item to add to the array
		index specifies where to begin add/remove in array, negative value starts at the end going in reverse
		howmany specifies how many items to remove from the point specified in index

6 - TEMPLATING LINKS & IMAGES
refer to the json file for image location with <img ng-src="{{phone.imageUrl}}"> 
src="{{expression}}" doesnt work

7 - ROUTING & MULTIPLE VIEWS
need to install "angular-route" as a dependency for the app to set up routing services. 
npm method is - npm install angular-route --save
then add ngroute as dependency with - angular.module('myApp, [require('angular-route')]);

all application routes in angular are declared via the $routeProvider, which is the provider of the $route service. 
	when(path, route);
		adds new route definition to the $route service. 
	otherwise(parameters);
		sets route definition that will be used on route change when no other route definition is matched.
	Property: 
		caseInsensitiveMatch : a boolean property indicating if routes defined using this provider should be 

matched using a case insensitive algorithm, defaults to false.

	https://docs.angularjs.org/api/ngRoute/service/$route#example for route example

routes can implement deep linking, which allows utilizing browser's history nav buttons and bookmarks.
providers are object that provide/create instances of services and expose configuration APIs that can be used to control 

the creation and runtime behvoir of a service, in this case the $routeProvider exposes APIs that allow to define routes 

for the application. providers can only be injected into config functions. cant inject $routeProvider into controller 

(PhoneListCtrl). 

$route service is usually used along with ngView directive. the role of ngView is to include the view template for the 

current route into the layout template (main page such as index.html).

index.html cut the contents in the main container div and put them into a seperate html page. the index page acts as a 

the view tempate, a 3rd file also created containing TBD: detail view for <span>{{phoneId}}</span> to serve as the 

placeholder template. 
a seperate .js file lists the modules ngRoute and controller as dependencies of the App 
	var phonecatApp = angular.module('phonecatApp', [
  		'ngRoute',
  		'phonecatControllers'	]);
then uses .config to inject the provider $routeProvider into the function and use the .when() with $routeProvider to 

define the routes.
	phonecatApp.config(['$routeProvider',
  		function($routeProvider) {
    			$routeProvider.
      				when('/phones', {
        				templateUrl: 'partials/phone-list.html',
        				controller: 'PhoneListCtrl'	
				}).
      				when('/phones/:phoneId', {
        				templateUrl: 'partials/phone-detail.html',
        				controller: 'PhoneDetailCtrl'
      				}).
      				otherwise({
        				redirectTo: '/phones'
      				});	}]);
when('/phones') displays the phone list view phone-list.html and uses PhoneListCtrl
when('/phones/:phoneId') when :phoneId is in the route, it is a variable in the URL
otherwise({redirectTo: '/phones'}) defaults to the /phones view when browser address doesnt match the previously defined 

routes.
PhoneDetailCtrl was added to controllers.js for the phone detail view, takes $routeParams and $scope as parameters for 

the function then $scope.phoneId = $routeParams.phoneId;
$route service uses the route /phones/:phoneId as a template that is matched against the current URL, all variables with 

: are extracted into $routeParams object.
	phonecatControllers.controller('PhoneDetailCtrl', ['$scope', '$routeParams',
  		function($scope, $routeParams) {
    			$scope.phoneId = $routeParams.phoneId;	}]);
Here the PhoneDetailCtrl updated the phoneId for $scope to the phoneId in the $routeParams object which was taken from 

:phoneId via the $route service. phoneId was defined in the phone's json file "id": "nexus-s"

8 - MORE TEMPLATING
in Controllers.js gets the json file associated with the phoneId that has been extracted from the current route using the 

$route servcie
	$http.get('phones/' + $routeParams.phoneId + '.json').success(function(data) {

9 - FILTERS
Writing and testing custom filters
Custome filter called 'checkmark' that returns a check or an x, this filter is a part of the module 'phonecatFilters'
	angular.module('phonecatFilters', []).filter('checkmark', function() {
  		return function(input) {
    			return input ? '\u2713' : '\u2718';	};	});
phonecatFilters is then added as a dependency to the phonecatApp 
	angular.module('phonecatApp', ['ngRoute','phonecatControllers','phonecatFilters']);
the filter code needs to be added to the webpage scripts <script src="filter.js"></script> 
so it can be used on the page {{ expression | filter }} 
{{ phone.connectivity.infrared | checkmark }}
checks the json data for phones connectivity.infrared. then updates with check or x if infrared is true or false
this filter could be tested as:
describe the checkmark filter in the module phonecatFilters, acess the filter to be tested by using inject(function

(checkmarkFilter) the word Filter has been added to checkmark. return the proper symbols for true or false.
	describe('filter', function() {

  		beforeEach(module('phonecatFilters'));

  		describe('checkmark', function() {

    		it('should convert boolean values to unicode checkmark or cross',
        		inject(function(checkmarkFilter) {
      			expect(checkmarkFilter(true)).toBe('\u2713');
      			expect(checkmarkFilter(false)).toBe('\u2718');
    		}));	});	}); 

10 - EVENT HANDLERS
For this example, it will create clickable images that update the main image with the thumbnail that was clicked. First 

in the HTML, an <li> is set to ng-repeat="img in phone.images"> which is referring to each "img/phones/nexus-s.0.jpg" 

inside an "images" object in the json file. then inside the <li> is the <img> child element with ng-src="{{img}}" so this 

applies the "img/phones.nexus-s.0.jpg" as the src for the img element and this process is repeated by the <li> element 

for all the imgs in the array of the "images" object. for each <img> element there is also ng-click="setImage(img)" which 

calls a function setImage() defined in the controller that holds this element. The function in the controller is defined 

by using $http.get to get the json data, then stores the data in the $scope.phone object, then stores the first item in 

the array of images in the $scope.mainImageUrl so it is the current image displayed in {{mainImageUrl}} on the HTML page 

using ng-src="{{mainImageUrl}}". then $scope.setImage is created as a function that updates $scope.mainImageUrl to the 

imageUrl that was passed as a parameter from img when the function is called setImage(img). When this function updates 

mainImageUrl, the element that {{mainImageUrl}} automatically updates with the new value.
	<img ng-src="{{mainImageUrl}}" class="phone">

	...

	<ul class="phone-thumbs">
  		<li ng-repeat="img in phone.images">
    			<img ng-src="{{img}}" ng-click="setImage(img)">
  		</li>
	</ul>

	phonecatControllers.controller('PhoneDetailCtrl', ['$scope', '$routeParams', '$http',
 		function($scope, $routeParams, $http) {
    			$http.get('phones/' + $routeParams.phoneId + '.json').success(function(data) {
      			$scope.phone = data;
      			$scope.mainImageUrl = data.images[0];	});

    		$scope.setImage = function(imageUrl) {
      			$scope.mainImageUrl = imageUrl;	};  }]);

11 - REST AND CUSTOM SERVICES
using the RESTful client will replace the way the app fetches data rather than using $http. While $http does the job fine 

using "get" "post" and "delete", $resource takes $http functionality and makes it useful for RESTful API scenarios. 

$resource should only be used for RESTful API, otherwise just use $http.
It is provided by Angular in the ng-resource module, this must be installed seperately from angular to use. would be 

added as dependency along with angular, angular-route, etc... in the package.json. the main HTML page would load the 

custom service script <script src="services.js"> as well as angular resource module <script src=".../angular-

resource.js"> that was installed. services.js would define the service as follows:
	var phonecatServices = angular.module('phonecatServices', ['ngResource']);

	phonecatServices.factory('Phone', ['$resource',
  		function($resource){
    			return $resource('phones/:phoneId.json', {}, {
      			query: {method:'GET', params:{phoneId:'phones'}, isArray:true}	});	}]);
phonecatServices would then be added to the list of dependencies for the phonecatApp
	angular.module('phonecatApp',['ngRoute','phonecatControllers','phonecatFilters','phonecatServices']);
when storing the data from the json file into $scope.phones, the $http method would be
	$http.get('phones/phones.json').success(function(data) {
  		$scope.phones = data; });
and the $resource method would be
	$scope.phones = Phone.query();

12 - APPLYING ANIMATIONS
angular provides animation functionality in the ng-animate module which is seperate from angular.js just as angular-

resrouce and angular-routes is. include the jquery.js library before angular-animate.js, then add the animations.js 

service after angular-animate.js.
ngAnimate gets added to the animation service as a dependency 
	angular.module('phonecatAnimations',['ngAnimate']);
then the phonecatAnimations service gets added as dependancy to the app
	angular,module('phonecatApp',['phonecatAnimations','...
the HTML page only needs the class set on the element for the CSS. then CSS sets the animation code. examples:
	.phone-listing.ng-enter {transition: 0.5s linear all; opacity: 0; height: 0; overflow: hidden}
	.phone-listing.ng-leave {opacity: 1; overflow: hidden;}
	.phone-listing.ng-leave.ng-leave-active {opacity: 0; height: 0; padding-top: 0; padding-bottom: 0;}
-----ng-enter is applied to element when new phone is added to the list
	ng-move is applied when items are moved around in the list
	ng-leave is applied when items are removed
enter, move, and leave are "starting" classes for the beginning of animations
"-active" is applied at the end of any of the starting classes to represent the end of animation

.view-container {
  position: relative;
}
-----view container is positioned relative which will effect the elements contained within it

.view-frame.ng-enter, .view-frame.ng-leave {
  background: white;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
}
-----view-frame.ng-enter  and ng-leave will be positioned absolute to its parent element that has had a position set

.view-frame.ng-enter {
  -webkit-animation: 0.5s fade-in;
  -moz-animation: 0.5s fade-in;
  -o-animation: 0.5s fade-in;
  animation: 0.5s fade-in;
  z-index: 100;
}
-----view-frame.ng-enter will be displayed above all elements using z-index and will fade in for 1/2 a second

.view-frame.ng-leave {
  -webkit-animation: 0.5s fade-out;
  -moz-animation: 0.5s fade-out;
  -o-animation: 0.5s fade-out;
  animation: 0.5s fade-out;
  z-index:99;
}
-----the view-frame will be displayed beneath the new view-frame using z-index and will fade out for 1/2 second

@keyframes fade-in {
  from { opacity: 0; }
  to { opacity: 1; }
}
-----@keyframes animationname {keyframes-selector {css-styles;}}
-----keyframes specify the animation code, where from and to is the same as 0% and 100%, 0% is the beginning and 100% is 

the end
-----animationname is the defined name of the animation, in this case it creates an animation called fade-in. so when 

ng-leave updates the css to 0.5s fade-in, fade-in is changing the opacity from 0 to 1 in 0.5s

ng-class="{active:mainImageUrl==img}" adds the active class to the img that equals the img value in mainImageUrl and 

removes active from the img that is not.

END
can bootstrap angular projects with angular-seed https://github.com/angular/angular-seed
